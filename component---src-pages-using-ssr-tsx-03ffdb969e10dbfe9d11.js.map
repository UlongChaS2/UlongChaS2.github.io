{"version":3,"file":"component---src-pages-using-ssr-tsx-03ffdb969e10dbfe9d11.js","mappings":"uKAgDA,IAhCA,SAAYA,GAA8C,IAADC,EAAAC,EAAA,IAA5C,MAAEC,EAAK,YAAEC,EAAW,SAAEC,GAAoBL,EACrD,MAAM,KAAEM,IAASC,EAAAA,EAAAA,gBAAe,YAY1BC,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAgC,QAApBT,EAAGK,EAAKG,oBAAY,IAAAR,OAAA,EAAjBA,EAAmBE,MAExC,OACEQ,EAAAA,EAAAA,GAAAC,EAAAA,SAAA,MACED,EAAAA,EAAAA,GAAA,aAAQD,EAAe,GAAGP,OAAWO,IAAiBP,IACtDQ,EAAAA,EAAAA,GAAA,QAAME,KAAK,cAAcC,QAASN,KAClCG,EAAAA,EAAAA,GAAA,QAAMI,SAAS,WAAWD,QAASX,KACnCQ,EAAAA,EAAAA,GAAA,QAAMI,SAAS,iBAAiBD,QAASN,KACzCG,EAAAA,EAAAA,GAAA,QAAMI,SAAS,UAAUD,QAAQ,aACjCH,EAAAA,EAAAA,GAAA,QAAME,KAAK,eAAeC,QAAQ,aAClCH,EAAAA,EAAAA,GAAA,QAAME,KAAK,kBAAkBC,SAA0B,QAAjBZ,EAAAI,EAAKG,oBAAY,IAAAP,OAAA,EAAjBA,EAAmBc,SAAU,MACnEL,EAAAA,EAAAA,GAAA,QAAME,KAAK,gBAAgBC,QAASX,KACpCQ,EAAAA,EAAAA,GAAA,QAAME,KAAK,sBAAsBC,QAASN,IACzCH,EAGP,C,6GCxCA,MAuBaY,EAAOA,KAAMN,EAAAA,EAAAA,GAACO,EAAAA,EAAG,CAACf,MAAM,YAAYC,iBAAae,EAAWd,cAAUc,IAEnF,UAzBiBnB,IAAyC,IAAxC,WAAEoB,GAAiCpB,EACnD,OACEW,EAAAA,EAAAA,GAACU,EAAAA,EAAM,MACLV,EAAAA,EAAAA,GAAA,UAAI,iBACWA,EAAAA,EAAAA,GAAA,SAAG,0BAElBA,EAAAA,EAAAA,GAAA,SAAG,mHACgH,KACjHA,EAAAA,EAAAA,GAAA,YAAM,yCAA4C,MAEpDA,EAAAA,EAAAA,GAAA,OAAKW,MAAO,CAAEC,MAAO,QAASC,aAAc,wBAA0BC,IAAI,eAAeC,IAAKN,EAAWO,WACzGhB,EAAAA,EAAAA,GAAA,SAAG,kCAC+B,KAChCA,EAAAA,EAAAA,GAAA,KAAGiB,KAAK,oFAAmF,6CAEvF,MAGNjB,EAAAA,EAAAA,GAACkB,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C","sources":["webpack://gatsby-starter-default/./src/components/seo.tsx","webpack://gatsby-starter-default/./src/pages/using-ssr.tsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ninterface SeoProps {\n  title: string;\n  description?: string;\n  children?: React.ReactNode;\n}\n\nfunction Seo({ title, description, children }: SeoProps) {\n  const { site } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          author\n        }\n      }\n    }\n  `);\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  );\n}\n\nexport default Seo;\n","import * as React from 'react';\nimport { Link } from 'gatsby';\n\nimport Layout from '../components/GlobalLayout';\nimport Seo from '../components/seo';\n\nconst UsingSSR = ({ serverData }: { serverData: any }) => {\n  return (\n    <Layout>\n      <h1>\n        This page is <b>rendered server-side</b>\n      </h1>\n      <p>\n        This page is rendered server side every time the page is requested. Reload it to see a(nother) random photo from{' '}\n        <code>dog.ceo/api/breed/shiba/images/random</code>:\n      </p>\n      <img style={{ width: '320px', borderRadius: 'var(--border-radius)' }} alt=\"A random dog\" src={serverData.message} />\n      <p>\n        To learn more, head over to our{' '}\n        <a href=\"https://www.gatsbyjs.com/docs/reference/rendering-options/server-side-rendering/\">\n          documentation about Server Side Rendering\n        </a>\n        .\n      </p>\n      <Link to=\"/\">Go back to the homepage</Link>\n    </Layout>\n  );\n};\n\nexport const Head = () => <Seo title=\"Using SSR\" description={undefined} children={undefined} />;\n\nexport default UsingSSR;\n\nexport async function getServerData() {\n  try {\n    const res = await fetch(`https://dog.ceo/api/breed/shiba/images/random`);\n    if (!res.ok) {\n      throw new Error(`Response failed`);\n    }\n    return {\n      props: await res.json(),\n    };\n  } catch (error) {\n    return {\n      status: 500,\n      headers: {},\n      props: {},\n    };\n  }\n}\n"],"names":["_ref","_site$siteMetadata","_site$siteMetadata2","title","description","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","___EmotionJSX","React","name","content","property","author","Head","Seo","undefined","serverData","Layout","style","width","borderRadius","alt","src","message","href","Link","to"],"sourceRoot":""}