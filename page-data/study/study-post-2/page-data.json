{"componentChunkName":"component---src-templates-study-template-tsx","path":"/study/study-post-2/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"TypeScript 기초부터 활용까지","date":"2025년 01월 20일","category":"study"},"html":"<p>TypeScript는 JavaScript에 타입 시스템을 추가한 언어로, 대규모 애플리케이션 개발에 매우 유용합니다.</p>\n<h2>타입 정의</h2>\n<p>기본 타입들을 정의하는 방법을 알아봅시다.</p>\n<pre><code class=\"language-typescript\">let age: number = 25;\nlet name: string = 'John';\nlet isActive: boolean = true;\n</code></pre>\n<h2>인터페이스</h2>\n<p>객체의 구조를 정의할 수 있습니다.</p>\n<pre><code class=\"language-typescript\">interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst user: User = {\n  id: 1,\n  name: 'John Doe',\n  email: 'john@example.com',\n};\n</code></pre>\n<h2>제네릭</h2>\n<p>재사용 가능한 컴포넌트를 만들 때 제네릭을 활용할 수 있습니다.</p>\n<pre><code class=\"language-typescript\">function identity&#x3C;T>(arg: T): T {\n  return arg;\n}\n\nconst result = identity&#x3C;string>('hello');\n</code></pre>\n<h2>유틸리티 타입</h2>\n<p>TypeScript는 유용한 내장 유틸리티 타입들을 제공합니다.</p>\n<ul>\n<li><code>Partial&#x3C;T></code>: 모든 속성을 선택적으로 만듭니다</li>\n<li><code>Required&#x3C;T></code>: 모든 속성을 필수로 만듭니다</li>\n<li><code>Pick&#x3C;T, K></code>: 특정 속성만 선택합니다</li>\n<li><code>Omit&#x3C;T, K></code>: 특정 속성을 제외합니다</li>\n</ul>\n<h2>결론</h2>\n<p>TypeScript를 사용하면 코드의 안정성과 유지보수성을 크게 향상시킬 수 있습니다.</p>","timeToRead":1}},"pageContext":{"slug":"/study-post-2/"}},"staticQueryHashes":["3649515864"],"slicesMap":{}}