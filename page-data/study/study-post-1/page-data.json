{"componentChunkName":"component---src-templates-study-template-tsx","path":"/study/study-post-1/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"React Hooks 완벽 가이드","date":"2025년 01월 15일","category":"study"},"html":"<p>React Hooks는 함수형 컴포넌트에서 상태와 생명주기 기능을 사용할 수 있게 해주는 강력한 기능입니다.</p>\n<h2>useState - 상태 관리</h2>\n<p><code>useState</code>는 가장 기본적인 Hook으로, 함수형 컴포넌트에서 상태를 관리할 수 있게 해줍니다.</p>\n<pre><code class=\"language-javascript\">const [count, setCount] = useState(0);\n</code></pre>\n<h2>useEffect - 사이드 이펙트 처리</h2>\n<p><code>useEffect</code>를 사용하면 컴포넌트의 생명주기에 따른 작업을 수행할 수 있습니다.</p>\n<pre><code class=\"language-javascript\">useEffect(() => {\n  document.title = `You clicked ${count} times`;\n}, [count]);\n</code></pre>\n<h2>커스텀 Hooks</h2>\n<p>재사용 가능한 로직을 커스텀 Hook으로 만들 수 있습니다.</p>\n<pre><code class=\"language-javascript\">function useWindowWidth() {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return width;\n}\n</code></pre>\n<h2>마무리</h2>\n<p>React Hooks를 활용하면 더 깔끔하고 재사용 가능한 코드를 작성할 수 있습니다.</p>","timeToRead":1}},"pageContext":{"slug":"/study-post-1/"}},"staticQueryHashes":["3649515864"],"slicesMap":{}}